var
	ele = document.getElementById('savespacew'),
	winwidth=window.innerWidth,
	winheight=window.innerHeight;
var 
   highscorename,
	fps=50,
	startofgame = 0,
	oLoop,
	gLoop,
	points = 0,
	rev = 0,
	heightrecord = 0,
	state = true,
	canvas = document.getElementById('canvas'), 
	ctx = canvas.getContext('2d');
	//canvas2 = document.getElementById('canvas2'), 
	//ctx2 = canvas.getContext('2d');
	
	var datastr = 'NO NAME   99999NO Name   99998NO Name   99997NO Name   99996NO Name   99995NO Name   99994NO Name   99993NO Name   99992NO Name   99991NO Name   99990';
//alert(datastr);
	var score=new Array(10);
	var username=new Array(10);
	//if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i))) {
	var width = 320, 
		height = 450;

	canvas.width = width;
	canvas.height = height;
	//canvas2.width = width;
	//canvas2.height = height;
	var img2 = new Image();
	img2.src = 'instruction.png';

//Levels
var 	edulvl = 0;
var	inflvl = 0;
var	indlvl = 0;
var	govlvl = 0;
var	canlvl = 0;
var	maxlvl = 4;
var	minlvl = 0;//current minium level
	
//Pause State
var gamePaused=false;

var clear = function(){
//Change Colour
if (heightrecord<50) ctx.fillStyle = '#D5EDFF';
else if (heightrecord<100) ctx.fillStyle = '#CBE3F5';
else if (heightrecord<200) ctx.fillStyle = '#C1D9EB';
else if (heightrecord<300) ctx.fillStyle = '#B7CFE1';
else if (heightrecord<400) ctx.fillStyle = '#ADC5D7';
else ctx.fillStyle = '#A3BBCD';

	ctx.clearRect(0, 0, width, height);
	ctx.beginPath();
	ctx.rect(0, 0, width, height);
	ctx.closePath();
	ctx.fill();
}

var howManyCircles = 10, circles = [];


var platformWidth = 64;

//Highscore board
var highscoreboard = function(){
	gLoop= setTimeout(function(){
	clear();
			ctx.fillStyle = "Black";
			ctx.font = "10pt Arial";
			for(i=0;i<=8;i++){
				ctx.fillText("0"+(i+1)+': ' + username[i], 80, 80+i*30);
				ctx.fillText(score[i], width/2+50, 80+i*30);
				}
				ctx.fillText((10)+': ' + username[9], 80, 80+9*30);
				ctx.fillText(score[9], width/2+50, 80+9*30);
				
			ctx.fillStyle = "Black";
			ctx.font = "16pt Arial";
			ctx.fillText('High Scores', 105, 20);
			ctx.font = "14pt Arial";
			ctx.fillText("Click or touch anywhere to restart.", 22, 420);
			

		if (83 in keysDown || 32 in keysDown) { // S
		clearTimeout(gLoop);
	   points = 0;
		state= true;
	gLoop = setTimeout(GameLoop, 1000 / fps);
	}
	$("#canvas").click(function(){
		clearTimeout(gLoop);
	   points = 0;
		state= true;
	gLoop = setTimeout(GameLoop, 1000 / fps);
	});
	
	$('#canvas').bind('touchstart', function() {

		clearTimeout(gLoop);
	   points = 0;
		state= true;
	gLoop = setTimeout(GameLoop, 1000 / fps);
	});	
				
	},100);
}
//Game Over
var conclusion = function (){
	$(savespacec).simpledialog2({
    mode : 'button',
	animate: false,
    headerText : 'GAME OVER',
	headerClose: false,
	buttonPrompt : 'Congratulations!<br\>YOUR RESULT: '+points +'. <br/>Please enter your name and submit the score.',
	buttonInput: true,
    buttons : {
		
      'Submit Score': {
		touchstart:function () {
			insert();
		restart();
      submitscore();
		//alert(highscorename+ ', your score has been submitted.');
      
		},
        click: function () {
		insert();
		restart();		
		submitscore();
		//alert(highscorename+ ', your score has been submitted.');
		//alert('between check and restart');
        }
		}
	  }
    })
}	



var restart = function (){
 		edulvl = 0;
		inflvl = 0;
		indlvl = 0;
		govlvl = 0;
		canlvl = 0;
		maxlvl = 4;
		minlvl = 0;
		
		rev = 0;
		heightrecord = 0;
		state= true;
	$(savespacer).simpledialog2({
    mode : 'button',
	animate: false,
    headerText : 'GAME OVER',
	headerClose: false,
	buttonPrompt : 'Congratulations!<br\>	 YOUR RESULT: '+points +'.<br\> Please press Restart.',
	buttonInput: false,
    buttons : {
      'View highscores': {
		touchstart:function () {
			highscoreboard();
		},
        click: function () {
			highscoreboard();
        }

      },
      'Restart': {
		touchstart:function () {
			clearTimeout(gLoop);
			points = 0;
		state= true;
		GameLoop();
		},
        click: function () {
        	clearTimeout(gLoop);
        	points = 0;
		state= true;
		GameLoop();
        },
        icon: "delete",
        theme: "c"
      }
	  }
    })
}	





//Change Infrastructure Level
function ChangeInf(){
if (inflvl==0) ;
else if(inflvl==1) platformWidth+=6; //+5
else if(inflvl==2) platformWidth+=5; //+4
else if(inflvl==3) platformWidth+=4; //+3
else if(inflvl==4) platformWidth+=3; //+2

}

//Pause
function pauseGame() {
  if (!gamePaused) {
    gLoop = clearTimeout(gLoop);
    gamePaused = true;
  } else if (gamePaused) {
    gLoop = setTimeout(GameLoop, 1000 / fps);
    gamePaused = false;
  }
}
//After upgrade
function afterupgrade(){
	canlvl=0;
	pauseGame();
}
for (var i = 0; i < howManyCircles; i++) 
	circles.push([Math.random() * width, Math.random() * height, Math.random() * 100, Math.random() / 2+0.2]);
	//transparency-[3]
var DrawCircles = function(){
	for (var i = 0; i < howManyCircles; i++) {
		ctx.fillStyle = 'rgba(255, 255, 255, ' + circles[i][3] + ')';
		
		
		ctx.beginPath();
		//arc(x-[0], y-[1], radius-[2], startAngle, endAngle, anticlockwise)  
		ctx.arc(circles[i][0], circles[i][1], circles[i][2], 0, Math.PI * 2, true);
		ctx.closePath();
		ctx.fill();
		
	}
};

var MoveCircles = function(e){
	for (var i = 0; i < howManyCircles; i++) {
		if (circles[i][1] - circles[i][2] > height) {
			circles[i][0] = Math.random() * width;
			circles[i][2] = Math.random() * 100;
			circles[i][1] = 0
			circles[i][3] = Math.random() / 2+0.2;
		}
		else {
			circles[i][1] += e;
		}
	}
};

var player = new (function(){
	var that = this;
	that.image = new Image();

	that.image.src = "player.png"
	that.width = 65;
	that.height = 95;
	//that.frames = 1;
	//that.actualFrame = 0;
	that.X = 0;
	that.Y = 0;	

	that.isJumping = false;
	that.isFalling = false;
	that.jumpSpeed = 0;
	that.fallSpeed = 0;
	
    that.jump = function() {
		if (!that.isJumping && !that.isFalling) {
			that.fallSpeed = 0;
			that.isJumping = true;
			
			
			
			that.jumpSpeed = 17 + govlvl*2;
		}
	}
	
	that.checkJump = function() {
		//a lot of changes here
				
		if (that.Y > height*0.4) {
			that.setPosition(that.X, that.Y - that.jumpSpeed);		
		}
		else {
			if (that.jumpSpeed > 10) {
				points++;
				rev++;
				heightrecord++;
				}
			// if player is in mid of the gamescreen
			// dont move player up, move obstacles down instead
			MoveCircles(that.jumpSpeed * 0.5);
			
			platforms.forEach(function(platform, ind){
				platform.y += that.jumpSpeed;

				if (platform.y > height) {
					var type = ~~(Math.random() * 5);
					if (type == 0) 
						type = 1;
					else 
						type = 0;
					
					platforms[ind] = new Platform(Math.random() * (width - platformWidth), platform.y - height, type, 0);
				}
			});
		}
		
		
		that.jumpSpeed--;
		if (that.jumpSpeed == 0) {
			that.isJumping = false;
			that.isFalling = true;
			that.fallSpeed = 1;
		}
	
	}
	
	that.fallStop = function(){
		that.isFalling = false;
		that.fallSpeed = 0;
		that.jump();	
	}
	
	that.checkFall = function(){
		if (that.Y < height - that.height) {
			that.setPosition(that.X, that.Y + that.fallSpeed);
			that.fallSpeed++;
		} else {
			if (points == 0) 
				that.fallStop();
			else {
				//alert("GAMEOVER IS CALLED");
				GameOver();
				}
		}
	}
	
	that.moveLeft = function(){
		if (that.X > 0) {
			that.setPosition(that.X - 5, that.Y);
		}
	}
	
	that.moveRight = function(){
		if (that.X + that.width < width) {
			that.setPosition(that.X + 5, that.Y);
		}
	}

	
	that.setPosition = function(x, y){
		that.X = x;
		that.Y = y;
	}
	
	//that.interval = 0;
	that.draw = function(){
		try {
			ctx.drawImage(that.image, that.X, that.Y, that.width, that.height);
		} 
		catch (e) {
		};
		
		//if (that.interval == 4 ) {
		//	if (that.actualFrame == that.frames) {
		//		that.actualFrame = 0;
		//	}
		//	else {
		//		that.actualFrame++;
		//	}
		//	that.interval = 0;
		//}
		//that.interval++;		
	}
})();


player.setPosition(~~((width-player.width)/2), height - player.height);
player.jump();
//Mouse event
document.onmousemove = function(e){
	if (player.X + canvas.offsetLeft > e.pageX) {
		player.moveLeft();
	} else if (player.X + canvas.offsetLeft < e.pageX) {
		player.moveRight();
	}
	
}
//Keyboard event

var keysDown = {};

addEventListener("keydown", function (e) {
	keysDown[e.keyCode] = true;
}, false);

addEventListener("keyup", function (e) {
	delete keysDown[e.keyCode];
}, false);




//Touch event
document.ontouchstart= function(e){
	
	if (player.X + canvas.offsetLeft > e.changedTouches[0].clientX)
	player.moveLeft();
	if (player.X + canvas.offsetLeft < e.changedTouches[0].clientX)
	player.moveRight();
}

document.ontouchmove= function(e){
	event.preventDefault();
	if (player.X + canvas.offsetLeft > e.changedTouches[0].clientX)
	player.moveLeft();
	if (player.X + canvas.offsetLeft < e.changedTouches[0].clientX)
	player.moveRight();
}

	var nrOfPlatforms = 7, 
		platforms = [],
		
		platformHeight = 20;
		 
	var Platform = function(x, y, type, used){
		var that=this;
		that.image = new Image();
		that.image.src = "platform0.png"
		//that.firstColor = '#FF8C00';
		//that.secondColor = '#EEEE00';
		that.onCollide = function(){

			player.fallStop();
		};
		
		if (type === 1) {
			//that.firstColor = '#AADD00';
			//that.secondColor = '#698B22';
			that.image.src = "platform1.png"
			that.onCollide = function(){
				player.fallStop();
				player.jumpSpeed = 50  + govlvl*2;
			};
		}
		
		
		that.x = ~~ x;
		that.y = y;
		that.type = type;
		
		//NEW IN PART 5
		that.isMoving = ~~(Math.random() * 2);
		that.direction= ~~(Math.random() * 2) ? -1 : 1;
			
		that.draw = function(){
			ctx.drawImage(that.image, that.x, that.y, platformWidth, platformHeight);
			//ctx.fillStyle = 'rgba(255, 255, 255, 1)';
			//var gradient = ctx.createRadialGradient(that.x + (platformWidth/2), that.y + (platformHeight/2), 5, that.x + (platformWidth/2), that.y + (platformHeight/2), 45);
			//gradient.addColorStop(0, that.firstColor);
			//gradient.addColorStop(1, that.secondColor);
			//ctx.fillStyle = gradient;
			//ctx.fillRect(that.x, that.y, platformWidth, platformHeight);
		};
	
		return that;
	};
		
	var generatePlatforms = function(){
		var position = 0, type;
		for (var i = 0; i < nrOfPlatforms; i++) {
			type = ~~(Math.random()*5);
			if (type == 0) 
				type = 1;
			else 
				type = 0;
			platforms[i] = new Platform(Math.random() * (width - platformWidth), position, type, 0);
			if (position < height - platformHeight) 
				position += ~~(height / nrOfPlatforms);
		}
	}();
	
	var checkCollision = function(){
	platforms.forEach(function(e, ind){
		if (
		(player.isFalling) && 
		(player.X < e.x + platformWidth) && 
		(player.X + player.width > e.x) && 
		(player.Y + player.height > e.y) && 
		(player.Y + player.height < e.y + platformHeight)
		) {
			//Contact with platform && Education Effect
			if(e.used!=1) {
			points += edulvl*2;
			rev += edulvl*2;
			e.used = 1;
			}	
			e.onCollide();
		}
	})
	}
//Upgrade system
var Nomoney = function(e){
	//alert("NOMONEY");
  $(savespacen).simpledialog2({
    mode : 'button',
	animate: false,
    headerText : 'Oops.',
    headerClose: false,
	buttonPrompt: 'You only have S$ '+rev+'. S$ ' + e + ' is required.',
    buttons : {
      'Back': {
		touchstart:function () {
		upgrade();
		},
        click: function () {
		upgrade();
        },
        icon: "delete",
        theme: "c"
      }
	  }
    })
  
}

var Wait = function(){
	//alert("waitcalled");
	ele.style.display = "block";

  
}
  


var Maxlevel = function(){
	
  $(savespacem).simpledialog2({
    mode : 'button',
	animate: false,
    headerText : 'Oops.',
    headerClose: false,
	buttonPrompt: 'Maximum level for this upgrade has been reached.',
    buttons : {
      'Back': {
		touchstart:function () {
		upgrade();
		},
        click: function () {
		upgrade();
        },
        icon: "delete",
        theme: "c"
      }
	  }
    })
  
}

var upgrade = function(){
	
  $(savespace3).simpledialog2({
	mode: 'button',
	animate: false,
    headerText: 'Upgrade',
    headerClose: false,
    buttonPrompt: 'You have S$ ' +rev + '. You can now choose one upgrade.',
    buttons : {
      'Education': {
		touchstart:function () {
			if(edulvl<maxlvl && rev>=(edulvl+1)*100){
			edulvl++;
			rev-=edulvl*100;
			afterupgrade();
			}
			else if (rev<(edulvl+1)*100) Nomoney((edulvl+1)*100);
			else Maxlevel();
        },
        click: function () {
			if(edulvl<maxlvl && rev>=(edulvl+1)*100){
			edulvl++;
			rev-=edulvl*100;
			afterupgrade();
			}
			else if (rev<(edulvl+1)*100) Nomoney((edulvl+1)*100);
			else Maxlevel();
        }
      },
      'Infrastructure': {
		touchstart:function () {
			if(inflvl<maxlvl && rev>=(inflvl+1)*100){
			inflvl++;
			ChangeInf();
			rev-=inflvl*100;
			afterupgrade();
			}
			else if (rev<(inflvl+1)*100) Nomoney((inflvl+1)*100);
			else Maxlevel();
        },
        click: function () {
			if(inflvl<maxlvl && rev>=(inflvl+1)*100){
			inflvl++;
			ChangeInf();
			rev-=inflvl*100;
			afterupgrade();
			}
			else if (rev<(inflvl+1)*100) Nomoney((inflvl+1)*100);
			else Maxlevel();
        }
      },
      'Industry': {
		touchstart:function () {
			if(indlvl<maxlvl && rev>=(indlvl+1)*100){
			indlvl++;
			rev-=indlvl*100;
			afterupgrade();
			}
			else if (rev<(indlvl+1)*100) Nomoney((indlvl+1)*100);
			else Maxlevel();
        },
        click: function () {
			if(indlvl<maxlvl && rev>=(indlvl+1)*100){
			indlvl++;
			rev-=indlvl*100;
			afterupgrade();
			}
			else if (rev<(indlvl+1)*100) Nomoney((indlvl+1)*100);
			else Maxlevel();
        }
      },
	  'Government': {
		touchstart:function () {
			if(govlvl<maxlvl && rev>=(govlvl+1)*100){
			govlvl++;
			rev-=govlvl*100;
			afterupgrade();
			}
			else if (rev<(govlvl+1)*100) Nomoney((govlvl+1)*100);
			else Maxlevel();
        },
        click: function () {
			if(govlvl<maxlvl && rev>=(govlvl+1)*100){
			govlvl++;
			rev-=govlvl*100;
			afterupgrade();
			}
			else if (rev<(govlvl+1)*100) Nomoney((govlvl+1)*100);
			else Maxlevel();
        }
      },
      'Save the revenue first.': {
		touchstart:function () {
			while(rev>=(minlvl+1)*100*(canlvl+1))
			canlvl++;
			pauseGame();
		},
        click: function () {
			while(rev>=(minlvl+1)*100*(canlvl+1))
			canlvl++;
			pauseGame();
        },
        icon: "delete",
        theme: "c"
      }
	  }
    })
  
}
	
//Main
var GameLoop = function(){
	



	clear();
	//MoveCircles(5);
	DrawCircles();

	if (player.isJumping) player.checkJump();
	if (player.isFalling) player.checkFall();
	
	player.draw();

//Difficulty Level Platform Moving	
	platforms.forEach(function(platform, index){
		if (platform.isMoving) {
			if (platform.x < 0) {
				platform.direction = 1;
			} else if (platform.x > width - platformWidth) {
				platform.direction = -1;
			}
				if(points<=1025)
				platform.x += platform.direction * (index / 2) * ~~(points / 100);
				else
				platform.x += platform.direction * (index / 2) * 10;
			}
		platform.draw();
	});
	//Keyboard
	if (65 in keysDown) { // A
		player.moveLeft();
		player.moveLeft();
	}
	if (68 in keysDown) { // D
		player.moveRight();
		player.moveRight();
	}

	checkCollision();
	
	ctx.fillStyle = "Black";
	ctx.fillText("Score:" + points, width-80, 20);
	ctx.fillText("Pause:" + gamePaused, 10, height-80);
	ctx.fillText("Height:" + heightrecord, 10, height-70);
	ctx.fillText("Revenue:" + rev, 10, height-60);
	ctx.fillText("Education:" + edulvl, 10, height-50);
	ctx.fillText("Infrastructure:" + inflvl, 10, height-40);
	ctx.fillText("Industry:" + indlvl, 10, height-30);
	ctx.fillText("Government:" + govlvl, 10, height-20);

	
	//Upgrade system
	//if (points-100*totallevel>100&&points!=0)
	//if (edulvl+inflvl+indlvl+govlvl<16 && points-100*(edulvl+inflvl+indlvl+govlvl+canlvl)>100){
	if(!gamePaused){
	if (edulvl ==0 || inflvl==0 || indlvl==0 || govlvl==0){
		if(rev>=(minlvl+1)*100*(canlvl+1)){
		//if(rev>100+canlvl*100){
			pauseGame();
			upgrade();}

	}
	else if (edulvl ==1 || inflvl==1 || indlvl==1 || govlvl==1){
		minlvl=1;
		if(rev>=(minlvl+1)*100*(canlvl+1)){
		//if(rev>200+canlvl*200){
			pauseGame();
			upgrade();}
	}
	else if (edulvl ==2 || inflvl==2 || indlvl==2 || govlvl==2){
		minlvl=2;
		if(rev>=(minlvl+1)*100*(canlvl+1)){
		//if(rev>300+canlvl*300){
			pauseGame();
			upgrade();}
	}
	else if (edulvl ==3 || inflvl==3 || indlvl==3 || govlvl==3){
		minlvl=3;
		if(rev>=(minlvl+1)*100*(canlvl+1)){
		//if(rev>400+canlvl*400){
			pauseGame();
			upgrade();}
	}
	}
	if(heightrecord>100) nrOfPlatforms--;
	if (state&&!gamePaused)
	gLoop = setTimeout(GameLoop, 1000 / fps);
	
}

	var GameOver = function(){
		state = false;
		clearTimeout(gLoop);
			setTimeout(function(){
			clear();
			ctx.fillStyle = "Black";
			ctx.font = "10pt Arial";
			ctx.fillText("GAME OVER", width / 2 - 60, height / 2 - 50);
			ctx.fillText("YOUR RESULT:" + points, width / 2 - 60, height / 2 - 30);
		}, 100);
		//alert('loadscore in Gameover begins');
		getData();
				
		
		
		//setTimeout(function(){;},1000);

			//to be added: high score board
	};

	
  

	//getData();

	//gLoop = setTimeout(GameLoop, 1000 / fps);
$(document).ready(function() {
	clearTimeout(gLoop);
  GameLoop();
});
//highscorerelated



var loadscore = function(){


	//alert('in loadscore'+datastr);
	for (var i = 0; i < 10; i++) {
	username[i]=datastr.substr(15*i,10);
	score[i]=parseInt(datastr.substr(15*i+10,5),10);
	}
	
}

var check = function() {
//alert("check is called; " + points+'&'+score[9]);
	if ((points-score[9])>0) {
	conclusion();

	}
	else
	{restart();}
}

var submitscore = function(){
		savescore();
	postData();
	}

var insert= function(){
	for (var i = 9; score[i]<points; i--) {
		score[i]=score[i-1];
		username[i]=username[i-1];
	}
	//alert("position:"+i);
	score[i+1]=points;
	//alert($.mobile.sdLastInput);
	highscorename=$.mobile.sdLastInput+'          ';
	highscorename=highscorename.substr(0,10);
	username[i+1]=highscorename;
	//alert(points+" "+username[i+1]);
}

var savescore = function(){
	datastr='';
	for (var i = 0; i<10; i++) {
	datastr=datastr+username[i];
	if (score[i]<10000) datastr=datastr+'0';
	if (score[i]<1000) datastr=datastr+'0';
	if (score[i]<100) datastr=datastr+'0';
	if (score[i]<10) datastr=datastr+'0';
	datastr=datastr+score[i];
	}
	//alert('savescore:'+datastr);
}


// *********************************************************************************

var sha1Value;
function ApplyTextForHash()
{
    
    var text4Hash = "ACJC"+datastr +"rmm5YLHWZxyxfU/0I/NJCO1o5l8=";
    sha1Value = Sha1.hash(text4Hash)
    $('#sha1_for_data').text(sha1Value);
    
}
function postData()
{	
		var UserName = "ACJC";
		var gameData = datastr;
		//alert('gameData:'+gameData);
		  ApplyTextForHash();
		var hash4Data = sha1Value;
		var postUrl = "http://iras20th.sg/User/SaveData";
		var jsonObjects = { UserName: UserName, TextData: gameData, HashedValue:hash4Data };
		//alert('jsonObj:'+jsonObjects);
		FlyJSONP.post({
        url: postUrl,
        parameters: jsonObjects,
        success:  function(datastr) {
        	//alert('success'+datastr);
		 
        },
		error: function (errorMsg) {
				alert("An error has occured, please resubmit your score.");
			},
			complete: function () {
				 
			}
		})
		};
function getData()
{
	Wait();
	var UserName = "ACJC";
	//var that = $("#savespacer").busy({ position : 'right', hide : false, img:'img/busy.gif' });
	var postUrl = "http://iras20th.sg/User/GetData";
	var jsonObjects = { UserName: UserName };
	FlyJSONP.post({
			url: postUrl,
			parameters: jsonObjects,
			success: function (data) {
		//		alert(JSON.stringify(data));
				datastr=JSON.parse(JSON.stringify(data)).Data;
				//datastr=JSON.stringify(data).substr(25,150);
				//alert('ingetdata datastr='+datastr);
			},
			error: function () {
				alert("Connection to server failed, your high score will not be saved");
			},
			complete: function () {
				ele.style.display = "none";
						loadscore();
		//alert('loadscore in GameOver end');
				check();
				
			}
		});
		
}

	